package template

import "fmt"

func Readme() string {
	return fmt.Sprintf("# 使用说明\n\n## 基本要求\n\n### 项目简介\n\n这个项目是用 **Go 语言 (版本 ≥ 1.23)** 开发的一个网站应用程序框架。它包含了以下几个重要部分：\n\n- **Gin**：用来处理网页请求的工具。\n- **GORM**：用来管理数据库的工具。\n- **JWT**：用来验证用户身份的工具。\n- **Swaggo**：用来自动生成 API 文档。\n- **Antgo**：一个帮助开发的命令行工具。\n\n如果在使用过程中有问题，可以通过邮箱 <56494565@qq.com> 联系作者。\n\n### 推荐工具\n\n- **Goland IDE**：一个方便写 Go 代码的开发工具。\n\n---\n\n## 工具和功能\n\n### 1. 如何管理接口文档\n\n#### 文档工具\n\n- 使用的工具：`swaggo/swag`\n\n#### 操作步骤\n\n1. 安装工具：\n   ```bash\n   go install github.com/swaggo/swag/cmd/swag@latest\n   ```\n2. 生成文档：\n   ```bash\n   swag init --parseDependency --parseInternal\n   ```\n3. 打开文档：\n   [Swagger 文档](http://localhost:9001/swagger/index.html)\n\n---\n\n### 2. 使用 Ant-CLI 工具\n\n#### 工具介绍\n\nAnt-CLI 是一个命令行工具，可以帮你快速完成项目开发中的许多任务。\n\n#### 常用功能\n\n- 查看帮助：\n  ```bash\n  ant-cli h\n  ```\n- 生成 RSA 密钥：\n  ```bash\n  ant-cli rsa\n  ```\n- 创建新项目：\n  ```bash\n  ant-cli create demo\n  ```\n- 根据表生成接口代码：\n  ```bash\n  ant-cli gen api database.table\n  ```\n- 自动生成模型：\n  ```bash\n  ant-cli gen model database.table\n  ```\n- 创建数据访问代码：\n  ```bash\n  ant-cli gen dao database.table\n  ```\n- 生成前端接口代码(推荐使用)：\n  ```bash\n  ant-cli ui\n  ```\n- 编译项目：\n  ```bash\n  ant-cli build main.exe\n  ```\n- 运行项目：\n  ```bash\n  ant-cli run main.go\n  ```\n- 安装依赖：\n  ```bash\n  ant-cli install\n  ```\n\n#### 默认访问地址\n\n- [Ant CLI 本地地址](http://127.0.0.1:49000)\n\n---\n\n### 3. 管理项目依赖\n\n#### 使用的工具\n\n- **go mod**：用来管理项目需要用到的其他代码。\n\n#### 操作步骤\n\n1. 初始化：\n   ```bash\n   go mod init\n   ```\n2. 整理依赖：\n   ```bash\n   go mod tidy\n   ```\n3. 把依赖复制到本地：\n   ```bash\n   go mod vendor\n   ```\n\n---\n\n### 4. 编译和运行项目\n\n#### 用 `go run` 快速运行\n\n- 直接运行代码：\n  ```bash\n  go run main.go\n  ```\n\n#### 用 `go build` 编译代码\n\n##### 本地编译\n\n- 编译命令：\n  ```bash\n  go build -o main.exe -ldflags \"-s -w\"\n  ```\n\n##### 跨平台编译\n\n1. **Linux 系统**：\n   ```bash\n   go env -w GOOS=linux GOARCH=amd64\n   go build -o main-linux -ldflags \"-s -w\"\n   ```\n2. **MacOS 系统**：\n   ```bash\n   go env -w GOOS=darwin GOARCH=amd64\n   go build -o main-macos -ldflags \"-s -w\"\n   ```\n3. **Windows 系统**：\n   ```bash\n   go env -w GOOS=windows GOARCH=amd64\n   go build -o main.exe -ldflags \"-s -w\"\n   ```\n\n---\n\n## 如何部署项目\n\n### 管理服务命令\n\n#### 配置服务,XXX代表项目名称,例如admin、api等,可以根据实际情况修改\n\n- 重新加载服务配置：\n  ```bash\n  sudo systemctl daemon-reload\n  ```\n- 启动服务：\n  ```bash\n  sudo systemctl start XXX.service\n  ```\n- 停止服务：\n  ```bash\n  sudo systemctl stop XXX.service\n  ```\n- 设置服务开机自动启动：\n  ```bash\n  sudo systemctl enable XXX.service\n  ```\n- 查看服务状态：\n  ```bash\n  sudo systemctl status XXX.service\n  ```\n\n#### 查看服务日志\n\n- 实时查看日志：\n  ```bash\n  sudo journalctl -u XXX.service -f\n  ```\n- 按时间筛选日志：\n  ```bash\n  journalctl -u XXX.service --since \"2024-12-25\" --until \"2024-12-26\"\n  ```\n\n### windows本地跨平台部署流程\n\n#### 步骤\n\n1. 编译代码：\n   ```bash\n   go env -w GOOS=linux; go build -o XXX -ldflags \"-s -w\"\n   ```\n2. 停止linux服务：\n   ```bash\n   sudo systemctl stop XXX.service\n   ```\n3. 上传文件到服务器：\n   ```bash\n   cd /usr/local/www/XXX/\n   ```\n4. 修改文件权限并启动服务：\n   ```bash\n   chmod 755 XXX && sudo systemctl start XXX.service\n   ```\n5. 查看服务运行日志是否成功：\n   ```bash\n   sudo journalctl -u XXX.service -f\n   ```\n\n6. 改回本地环境：\n   ```bash\n   go env -w GOOS=windows\n   ```\n\n")
}
